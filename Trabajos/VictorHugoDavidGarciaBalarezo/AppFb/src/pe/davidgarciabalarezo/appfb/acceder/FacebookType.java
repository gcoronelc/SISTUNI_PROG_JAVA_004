/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pe.davidgarciabalarezo.appfb.acceder;

// Generated by delombok at Fri Mar 04 19:58:22 CET 2016
import static com.restfb.util.StringUtils.isBlank;
import com.restfb.Facebook;
import com.restfb.types.NamedFacebookType;
import com.restfb.util.ReflectionUtils;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Base class which encapsulates behavior and properties common to most
 * <a href="http://developers.facebook.com/docs/reference/api/">Graph API types</a>.
 *
 * @author <a href="http://restfb.com">Mark Allen</a>
 * @since 1.5
 */
public class FacebookType implements Serializable {

  
  /**
   * This object's unique Facebook ID.
   */
  @Facebook
  private String id;
  
  /**
   * This object's metadata, available by including the {@code metadata=1} URL parameter in an API request.
   */
  @Facebook
  private Metadata metadata;
  @Facebook
  private String type;
  private static final long serialVersionUID = 1L;

  /**
   * @see java.lang.Object#hashCode()
   */
  @Override
  public int hashCode() {
    return ReflectionUtils.hashCode(this);
  }

  /**
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object that) {
    return ReflectionUtils.equals(this, that);
  }

  /**
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    return ReflectionUtils.toString(this);
  }

 /**
   * Represents <a href="http://developers.facebook.com/docs/api#introspection">Facebook Object metadata</a>, available
   * by including the {@code metadata=1} URL parameter in an API request.
   *
   * @author <a href="http://restfb.com">Mark Allen</a>
   * @since 1.5
   */
  public static class Metadata implements Serializable {

    /**
     * The available connections for this object.
     * 
     * @return The available connections for this object.
     */
    @Facebook
    private Connections connections;
    /**
     * The metadata type of the object
     * 
     * @return the metadata type
     * @since 1.6.16
     */
    @Facebook
    private String type;
    @Facebook
    private List<NamedFacebookType> fields = new ArrayList<NamedFacebookType>();
    private static final long serialVersionUID = 1L;
    /**
     * @see java.lang.Object#hashCode()
     */

    @Override
    public int hashCode() {
      return ReflectionUtils.hashCode(this);
    }
    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */

    @Override
    public boolean equals(Object that) {
      return ReflectionUtils.equals(this, that);
    }
    /**
     * @see java.lang.Object#toString()
     */

    @Override
    public String toString() {
      return ReflectionUtils.toString(this);
    }
    /**
     * Represents <a href="http://developers.facebook.com/docs/api#introspection">Facebook Object connections
     * metadata</a>, available by including the {@code metadata=1} URL parameter in an API request.
     * 
     * @author <a href="http://restfb.com">Mark Allen</a>
     * @since 1.5
     */

    public static class Connections implements Serializable {

      /**
       * This object's 'home' connection URL.
       * 
       * @return This object's 'home' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String home;
      /**
       * This object's 'feed' connection URL.
       * 
       * @return This object's 'feed' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String feed;
      /**
      * This object's 'friends' connection URL.
       * 
       * @return This object's 'friends' connection URL, or {@code null} if it doesn't have one.
      */
      @Facebook
      private String friends;
      /**
       * This object's 'family' connection URL.
       * 
       * @return This object's 'family' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String family;
      /**
       * This object's 'activities' connection URL.
       * 
       * @return This object's 'activities' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String activities;
      /**
       * This object's 'interests' connection URL.
       * 
       * @return This object's 'interests' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String interests;
      /**
       * This object's 'music' connection URL.
       * 
       * @return This object's 'music' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String music;
      /**
       * This object's 'books' connection URL.
       * 
       * @return This object's 'books' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String books;
      /**
       * This object's 'movies' connection URL.
       * 
       * @return This object's 'movies' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String movies;
      /**
       * This object's 'television' connection URL.
       * 
       * @return This object's 'television' connection URL, or {@code null} if it doesn't have one.
      */
      @Facebook
      private String television;
      /**
       * This object's 'likes' connection URL.
       * 
       * @return This object's 'likes' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String likes;
      /**
       * This object's 'posts' connection URL.
       * 
       * @return This object's 'posts' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String posts;
      /**
       * This object's 'tagged' connection URL.
       * 
       * @return This object's 'tagged' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String tagged;
      /**
       * This object's 'statuses' connection URL.
       * 
       * @return This object's 'statuses' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String statuses;
      /**
       * This object's 'links' connection URL.
       * 
       * @return This object's 'links' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String links;
      /**
       * This object's 'notes' connection URL.
       * 
       * @return This object's 'notes' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String notes;
      /**
       * This object's 'photos' connection URL.
       * 
       * @return This object's 'photos' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String photos;
      /**
       * This object's 'albums' connection URL.
       * 
       * @return This object's 'albums' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String albums;
      /**
       * This object's 'events' connection URL.
       * 
       * @return This object's 'events' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String events;
      /**
       * This object's 'groups' connection URL.
       * 
       * @return This object's 'groups' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String groups;
      /**
       * This object's 'videos' connection URL.
       * 
       * @return This object's 'videos' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String videos;
      /**
       * This object's 'picture' connection URL.
       * 
       * @return This object's 'picture' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String picture;
      /**
       * This object's 'inbox' connection URL.
       * 
       * @return This object's 'inbox' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String inbox;
      /**
       * This object's 'outbox' connection URL.
       * 
       * @return This object's 'outbox' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String outbox;
      /**
       * This object's 'updates' connection URL.
       * 
       * @return This object's 'updates' connection URL, or {@code null} if it doesn't have one.
       */
      @Facebook
      private String updates;
      private static final long serialVersionUID = 1L;
      /**
       * @see java.lang.Object#hashCode()
       */

      @Override
      public int hashCode() {
        return ReflectionUtils.hashCode(this);
      }
      /**
       * @see java.lang.Object#equals(java.lang.Object)
       */

      @Override
      public boolean equals(Object that) {
        return ReflectionUtils.equals(this, that);
      }
      /**
       * @see java.lang.Object#toString()
       */

      @Override
      public String toString() {
        return ReflectionUtils.toString(this);
      }
      /**
       * Does this object have a 'home' connection?
       * 
       * @return {@code true} if this object has a 'home' connection, {@code false} otherwise.
       */

      public Boolean hasHome() {
        return !isBlank(home);
      }
      /**
       * Does this object have a 'feed' connection?
       * 
       * @return {@code true} if this object has a 'feed' connection, {@code false} otherwise.
       */

      public Boolean hasFeed() {
        return !isBlank(feed);
      }
      /**
       * Does this object have a 'friends' connection?
       * 
       * @return {@code true} if this object has a 'friends' connection, {@code false} otherwise.
       */

      public Boolean hasFriends() {
        return !isBlank(friends);
      }
      /**
       * Does this object have a 'family' connection?
       * 
       * @return {@code true} if this object has a 'family' connection, {@code false} otherwise.
       */

      public Boolean hasFamily() {
        return !isBlank(family);
      }
      /**
       * Does this object have an 'activities' connection?
       * 
       * @return {@code true} if this object has an 'activities' connection, {@code false} otherwise.
       */

      public Boolean hasActivities() {
        return !isBlank(activities);
      }
      /**
       * Does this object have an 'interests' connection?
       * 
       * @return {@code true} if this object has an 'interests' connection, {@code false} otherwise.
       */

      public Boolean hasInterests() {
        return !isBlank(interests);
      }
      /**
       * Does this object have a 'music' connection?
       * 
       * @return {@code true} if this object has a 'music' connection, {@code false} otherwise.
       */

      public Boolean hasMusic() {
        return !isBlank(music);
      }
      /**
       * Does this object have a 'books' connection?
       * 
       * @return {@code true} if this object has a 'books' connection, {@code false} otherwise.
       */

      public Boolean hasBooks() {
        return !isBlank(books);
      }
      /**
       * Does this object have a 'movies' connection?
       * 
       * @return {@code true} if this object has a 'movies' connection, {@code false} otherwise.
       */

      public Boolean hasMovies() {
        return !isBlank(movies);
      }
      /**
       * Does this object have a 'television' connection?
       * 
       * @return {@code true} if this object has a 'television' connection, {@code false} otherwise.
       */

      public Boolean hasTelevision() {
        return !isBlank(television);
      }
      /**
       * Does this object have a 'likes' connection?
       * 
       * @return {@code true} if this object has a 'likes' connection, {@code false} otherwise.
       */

      public Boolean hasLikes() {
        return !isBlank(likes);
      }
      /**
       * Does this object have a 'posts' connection?
       * 
       * @return {@code true} if this object has a 'posts' connection, {@code false} otherwise.
       */

      public Boolean hasPosts() {
        return !isBlank(posts);
      }
      /**
       * Does this object have a 'tagged' connection?
       * 
       * @return {@code true} if this object has a 'tagged' connection, {@code false} otherwise.
       */

      public Boolean hasTagged() {
        return !isBlank(tagged);
      }
      /**
       * Does this object have a 'statuses' connection?
       * 
       * @return {@code true} if this object has a 'statuses' connection, {@code false} otherwise.
       */

      public Boolean hasStatuses() {
        return !isBlank(statuses);
      }
      /**
       * Does this object have a 'links' connection?
       * 
       * @return {@code true} if this object has a 'links' connection, {@code false} otherwise.
       */

      public Boolean hasLinks() {
        return !isBlank(links);
      }
      /**
       * Does this object have a 'notes' connection?
       * 
       * @return {@code true} if this object has a 'notes' connection, {@code false} otherwise.
       */

      public Boolean hasNotes() {
        return !isBlank(notes);
      }
      /**
       * Does this object have a 'photos' connection?
       * 
       * @return {@code true} if this object has a 'photos' connection, {@code false} otherwise.
       */

      public Boolean hasPhotos() {
        return !isBlank(photos);
      }
      /**
       * Does this object have an 'albums' connection?
       * 
       * @return {@code true} if this object has an 'albums' connection, {@code false} otherwise.
       */

      public Boolean hasAlbums() {
        return !isBlank(albums);
      }
      /**
       * Does this object have an 'events' connection?
       * 
       * @return {@code true} if this object has an 'events' connection, {@code false} otherwise.
       */

      public Boolean hasEvents() {
        return !isBlank(events);
      }
      /**
       * Does this object have a 'groups' connection?
       * 
       * @return {@code true} if this object has a 'groups' connection, {@code false} otherwise.
       */

      public Boolean hasGroups() {
        return !isBlank(groups);
      }
      /**
       * Does this object have a 'videos' connection?
       * 
       * @return {@code true} if this object has a 'videos' connection, {@code false} otherwise.
       */

      public Boolean hasVideos() {
        return !isBlank(videos);
      }
      /**
       * Does this object have a 'picture' connection?
       * 
       * @return {@code true} if this object has a 'picture' connection, {@code false} otherwise.
       */

      public Boolean hasPicture() {
        return !isBlank(picture);
      }
      /**
       * Does this object have an 'inbox' connection?
       * 
       * @return {@code true} if this object has an 'inbox' connection, {@code false} otherwise.
       */

      public Boolean hasInbox() {
        return !isBlank(inbox);
      }
      /**
       * Does this object have an 'outbox' connection?
       * 
       * @return {@code true} if this object has an 'outbox' connection, {@code false} otherwise.
       */

      public Boolean hasOutbox() {
        return !isBlank(outbox);
      }
      /**
       * Does this object have an 'updates' connection?
       * 
       * @return {@code true} if this object has an 'updates' connection, {@code false} otherwise.
       */

      public Boolean hasUpdates() {
        return !isBlank(updates);
      }

      public String getHome() {
        return this.home;
      }

      public void setHome(final String home) {
        this.home = home;
      }

      public String getFeed() {
        return this.feed;
      }

      public void setFeed(final String feed) {
        this.feed = feed;
      }

      public String getFriends() {
        return this.friends;
      }

      public void setFriends(final String friends) {
        this.friends = friends;
      }

      public String getFamily() {
        return this.family;
      }

      public void setFamily(final String family) {
        this.family = family;
      }

      public String getActivities() {
        return this.activities;
      }

      public void setActivities(final String activities) {
        this.activities = activities;
      }

      public String getInterests() {
        return this.interests;
      }

      public void setInterests(final String interests) {
        this.interests = interests;
      }

      public String getMusic() {
        return this.music;
      }

      public void setMusic(final String music) {
        this.music = music;
      }

      public String getBooks() {
        return this.books;
      }

      public void setBooks(final String books) {
        this.books = books;
      }

      public String getMovies() {
        return this.movies;
      }

      public void setMovies(final String movies) {
        this.movies = movies;
      }

      public String getTelevision() {
        return this.television;
      }

      public void setTelevision(final String television) {
        this.television = television;
      }

      public String getLikes() {
        return this.likes;
      }

      public void setLikes(final String likes) {
        this.likes = likes;
      }

      public String getPosts() {
        return this.posts;
      }

      public void setPosts(final String posts) {
        this.posts = posts;
      }

      public String getTagged() {
        return this.tagged;
      }

      public void setTagged(final String tagged) {
        this.tagged = tagged;
      }

      public String getStatuses() {
        return this.statuses;
      }

      public void setStatuses(final String statuses) {
        this.statuses = statuses;
      }

      public String getLinks() {
        return this.links;
      }

      public void setLinks(final String links) {
        this.links = links;
      }

      public String getNotes() {
        return this.notes;
      }

      public void setNotes(final String notes) {
        this.notes = notes;
      }

      public String getPhotos() {
        return this.photos;
      }

      public void setPhotos(final String photos) {
        this.photos = photos;
      }

      public String getAlbums() {
        return this.albums;
      }

      public void setAlbums(final String albums) {
        this.albums = albums;
      }

      public String getEvents() {
        return this.events;
      }

      public void setEvents(final String events) {
        this.events = events;
      }

      public String getGroups() {
        return this.groups;
      }

      public void setGroups(final String groups) {
        this.groups = groups;
      }

      public String getVideos() {
        return this.videos;
      }

      public void setVideos(final String videos) {
        this.videos = videos;
      }

      public String getPicture() {
        return this.picture;
      }

      public void setPicture(final String picture) {
        this.picture = picture;
      }

      public String getInbox() {
        return this.inbox;
      }

      public void setInbox(final String inbox) {
        this.inbox = inbox;
      }

      public String getOutbox() {
        return this.outbox;
      }

      public void setOutbox(final String outbox) {
        this.outbox = outbox;
      }

      public String getUpdates() {
        return this.updates;
      }

      public void setUpdates(final String updates) {
        this.updates = updates;
      }
    }
    /**
     * Existing fields in the current type
     * 
     * @return list of field of the current type
     * @since ..
     */

    public List<NamedFacebookType> getFields() {
      return Collections.unmodifiableList(fields);
    }

    public boolean addField(NamedFacebookType field) {
      return fields.add(field);
    }

    public boolean removeField(NamedFacebookType field) {
      return fields.remove(field);
    }

    public Connections getConnections() {
      return this.connections;
    }

    public void setConnections(final Connections connections) {
      this.connections = connections;
    }

    public String getType() {
      return this.type;
    }

    public void setType(final String type) {
      this.type = type;
    }
  }

  /**
   * This object's unique Facebook ID.
   *
   * @return This object's unique Facebook ID.
   */
  public String getId() {
    return this.id;
  }

  /**
   * This object's unique Facebook ID.
   */
  public void setId(final String id) {
    this.id = id;
  }

  /**
   * This object's metadata, available by including the {@code metadata=} URL parameter in an API request.
   *
   * @return This object's metadata, available by including the {@code metadata=} URL parameter in an API request.
   */
  public Metadata getMetadata() {
    return this.metadata;
  }

  /**
   * This object's metadata, available by including the {@code metadata=} URL parameter in an API request.
   */
  public void setMetadata(final Metadata metadata) {
    this.metadata = metadata;
  }

  public String getType() {
    return this.type;
  }

  public void setType(final String type) {
    this.type = type;
  }
}

